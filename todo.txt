
API considerations
----------------------

Some Rust APIs seems to prefer writing to a slice vs returning a Vec.
Worth it?

Currently we only offer one-shot encryption/decryption for symmetric
ciphers. Support incremental update?

Rust lib interop
-------------------

Consider interop via traits with rand::rand_core, num::bigint, RustCrypto?

Missing Functions
---------------------
These are functions currently exposed by Botan's C API which are not
exposed by the high level Rust wrapper:

botan_base64_encode
botan_base64_decode

botan_hash_block_size
botan_cipher_output_length
botan_pbkdf_timed

botan_mp_*

botan_privkey_load_ed25519
botan_pubkey_load_ed25519
botan_privkey_ed25519_get_privkey
botan_pubkey_ed25519_get_pubkey

botan_privkey_load_rsa_pkcs1

botan_x509_cert_gen_selfsigned
botan_x509_cert_allowed_usage
botan_x509_cert_verify
botan_x509_cert_validation_status

Needs MP
^^^^^^^^^
botan_pubkey_get_field
botan_privkey_get_field

botan_privkey_load_rsa
botan_pubkey_load_rsa
botan_privkey_load_dh
botan_pubkey_load_dh
botan_privkey_load_ecdsa
botan_pubkey_load_ecdsa
botan_privkey_load_ecdh
botan_pubkey_load_ecdh

botan_privkey_load_dsa
botan_pubkey_load_dsa
botan_privkey_load_elgamal
botan_pubkey_load_elgamal

botan_fpe_fe1_init
botan_fpe_destroy
botan_fpe_encrypt
botan_fpe_decrypt
